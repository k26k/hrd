
Spring

다형성 구현
- 확장성을 높이기 위해 객체를 생성하기전 해당 객체 공통된 변수와 메서드가 정의된 인터페이스를 생성
- 해당 인터페이스를 참조해서 구현함


스프링에서 객체 생성과 대입

1. 디자인 패턴 이용하기
- 객체 생성을 캡슐화하여 java 코드로 객체 생성과 객체 삽입

2. 스프링 컨테이너 
- xml을 이용해 생성한 객체를 java 코드로 불러와서 삽입

3. 생성자 인젝션
- xml을 이용해 생성한 객체를 xml을 이용해 생성하는 다른 객체의 생성자에 대입

4. Setter 인젝션
- xml을 이용해 생성한 객체를 xml을 이용해 생성한 다른 객체의 set 메소드를 사용해 멤버변수에 삽입

5. 어노테이션(@) 방식
- @Component("")를 이용 특정 이름으로 객체를 생성
- @Autowired를 이용 이미 생성된 객체를 받아옴
- @Qualifier("")를 이용 특정 이름의 객체를 받아옴

6. 어노테이션(@)과 XML 설정 병행 사용하기
- 명확한 구분이 필요한 객체는 @Component("")와 @Autowired를 이용해서 생성
- 필요하지 않은 객체는 xml로 생성후 @Autowired를 이용해서 자동으로 대입


의존성 관계
- 의존성(Dependency) 관계란 객체와 객체의 결합 관계이다. 
- 즉 , 하나의 객체에서 다른 객체의 변수나 메소드를 이용해야 한다면 
- 이용하려는 객체에 대한 객체 생성과 생성된 객체의 레퍼런스 정보가 필요하다.



lombok






